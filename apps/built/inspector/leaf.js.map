{"version":3,"sources":["inspector/leaf.js"],"names":[],"mappings":"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","file":"inspector/leaf.js","sourcesContent":["import md5 from 'md5-o-matic'\nimport getType from '../lib/getType'\nimport ellipsize from 'ellipsize'\n\nconst PATH_PREFIX = '.root.'\nconst contains = (string, substring) => string.indexOf(substring) !== -1\nconst isPrimitive = v => getType(v) !== 'Object' && getType(v) !== 'Array'\n\nlet noop = () => {}\n\nview Leaf {\n  prop isExpanded, data, prefix, query, label, id, editable\n  prop getOriginal = noop, onSet = noop, onClick = noop\n\n  view.pause()\n\n  let rootPath, path, _data, type, key, original, expanded\n  let dataKeys = []\n  let _query = ''\n\n  const isInitiallyExpanded = () =>\n    view.props.root ||\n    !_query && isExpanded(path, data) ||\n    !contains(path, _query) && (typeof getOriginal === 'function')\n\n  const transformData = (data = {}) => {\n    data = Object.keys(_data).sort()\n  }\n\n  on.props(() => {\n    rootPath = `${prefix}.${label}`\n    key = label.toString()\n    path = rootPath.substr(PATH_PREFIX.length)\n    // originally was stream of ||s, but 0 was turning into false\n    _data = data\n\n    // multiline strings\n    if (typeof _data === 'string' && _data.indexOf('\\n') > -1) {\n      _data = _data.split('\\n')\n    }\n\n    if (_data)\n      dataKeys = Object.keys(_data).sort()\n\n    if (_data === undefined) _data = data\n    if (_data === undefined) _data = {}\n    type = getType(_data)\n    _query = query || ''\n\n    if (view.props.root)\n      expanded = true\n    else if (_query)\n      expanded = !contains(label, _query)\n\n    if (query && !_query)\n      expanded = isInitiallyExpanded()\n\n    view.update()\n  })\n\n  function toggle(e) {\n    if (!view.props.root)\n      expanded = !expanded\n\n    view.update()\n    onClick(_data)\n    e.stopPropagation()\n  }\n\n  const getLeafKey = (key, value) => isPrimitive(value) ?\n    (key + ':' + md5(String(key))) :\n    (key + '[' + getType(value) + ']')\n\n  const format = key => (\n    <Highlighter string={key} highlight={_query} />\n  )\n\n  const fnParams = fn => fn.toString()\n    .replace(/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/)|(\\s))/mg,'')\n    .match(/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m)[1]\n    .split(/,/)\n\n  const getLabel = (type, val, sets, editable) => (\n    <Label\n      val={val}\n      editable={editable}\n      onSet={_ => onSet([sets, _])}\n    />\n  )\n\n; <leaf class={rootPath}>\n    <label if={!view.props.root} htmlFor={id} onClick={toggle}>\n      <key>\n        <name>{format(key)}</name>\n        {getLabel('key', key, key, false)}\n      </key>\n      <colon>:</colon>\n      <expand class=\"function\" if={type == 'Function'}>\n        <i>fn ({fnParams(_data).join(', ')})</i>\n      </expand>\n\n      <expand if={type == 'Array'}>\n        <type>Array[{_data.length}]</type>\n      </expand>\n      <expand if={type == 'Object'}>\n        <type>{'{}   ' + dataKeys.length + ' keys'}</type>\n      </expand>\n      <value if={['Array', 'Object', 'Function'].indexOf(type) == -1} class={type.toLowerCase()}>\n        <str if={type.toLowerCase() == 'string'}>\n          {format(ellipsize(String(_data), 25))}\n        </str>\n        <else if={type.toLowerCase() != 'string'}>\n          {format(String(_data))}\n        </else>\n        {getLabel('val', _data, key, editable)}\n      </value>\n    </label>\n    <children>\n      <child\n        if={expanded && !isPrimitive(_data)}\n        repeat={dataKeys}>\n        <Leaf\n          if={_.indexOf('__') == -1}\n          key={getLeafKey(_, _data[_])}\n          onSet={(...args) => onSet(key, ...args)}\n          data={_data[_]}\n          editable={editable}\n          label={_}\n          prefix={rootPath}\n          onClick={onClick}\n          id={id}\n          query={_query}\n          getOriginal={original ? null : getOriginal}\n          isExpanded={isExpanded}\n        />\n      </child>\n    </children>\n  </leaf>\n\n  $leaf = {\n    padding: [1, 0],\n    fontSize: 13\n  }\n\n  const row = {\n    flexFlow: 'row'\n  }\n\n  $label = [row, {\n    position: 'relative',\n    color: 'rgba(0,0,0,0.8)',\n    opacity: 1,\n    alignItems: 'baseline'\n  }]\n\n  $helper = { color: '#ffff05' }\n  $boolean = { color: '#32a3cd', fontWeight: 700 }\n  $number = { color: '#b92222', marginTop: 2, fontWeight: 500 }\n  $string = { color: '#698c17' }\n\n  $key = [row, {\n    color: 'rgba(0,0,0,0.9)',\n    margin: [0],\n    fontWeight: 'bold'\n  }]\n\n  $function = { marginLeft: 10, marginTop: 2, color: '#962eba' }\n\n  $colon = {\n    opacity: 0.3,\n    color: '#000'\n  }\n\n  $name = {\n    color: \"#ff2f2f\",\n    fontWeight: 400,\n    margin: ['auto', 0]\n  }\n\n  $expand = [row, {\n  }]\n\n  $value = [row, {\n    position: 'relative',\n    margin: [0, 4, 0]\n  }]\n\n  $children = {\n    paddingLeft: 10\n  }\n\n  $type = {\n    margin: [1, 0, 0, 8],\n    opacity: 0.7,\n    flexFlow: 'row',\n  }\n}\n"],"sourceRoot":"/source/"}