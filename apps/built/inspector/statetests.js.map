{"version":3,"sources":["inspector/statetests.js"],"names":[],"mappings":"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","file":"inspector/statetests.js","sourcesContent":["import offset from 'mouse-event-offset'\n\nview StateTests {\n; <Tests.Name />\n; <Tests.Boolean />\n; <Tests.Counter />\n; <Tests.Props />\n; <Tests.Circles />\n}\n\nview Tests.Boolean {\n  let dead = false\n; <h1>is tupac dead? {dead.toString()}</h1>\n; <button onClick={() => dead = !dead}>toggle</button>\n}\n\nview Tests.Props {\n  let name = 'a string'\n\n; <input sync={name} />\n; <Test.PropsChild name={name} />\n\n  $ = { marginTop: 20 }\n}\n\nview Test.PropsChild {\n  prop name\n  let count = 0\n\n; <h1>my name is {name}</h1>\n; <h4>counter to test state {count}</h4>\n; <button onClick={() => count++}>up</button>\n}\n\nview Tests.Counter {\n  let count = 0\n; <h1>count is {count}</h1>\n; <button onClick={() => count++}>up</button>\n; <button onClick={() => count--}>down</button>\n}\n\nview Tests.Deep {\n  let person = { name: 'nick', tools: ['js', 'juggling balls', 'coffee'] }\n; <h1>deep</h1>\n; <h2>{JSON.stringify(person)}</h2>\n}\n\nview Tests.Name {\n  let first = 'nick'\n  let last = 'cammarata'\n; <h2>name is {first} {last}</h2>\n; <input sync={first} />\n; <input sync={last} />\n; <button onClick={() => {\n    first = 'nate';\n    last = 'wienert';\n  }}>nateify</button>\n}\n\nview Tests.Circles {\n  let coords = [[200, 200]]\n\n  function addCircle(click) {\n    coords.push(offset(click))\n  }\n\n; <circles onClick={addCircle}>\n    <Tests.Circle\n      repeat={coords}\n      key={''+_[0]+_[1]}\n      left={_[0]}\n      top={_[1]}\n    />\n  </circles>\n\n  $circles = { position: 'relative', background: '#eee', height: 400, width: 400 }\n}\n\nview Tests.Circle {\n  let c = () => Math.round(Math.random()*255)\n  let base = {\n    background: [c(), c(), c()],\n    position: 'absolute',\n    top: view.props.top,\n    left: view.props.left,\n    width: 118, height: 29,\n    borderRadius: 27\n  }\n  let style = scale =>\n    ({ ...base, transform: { scale } })\n\n; <circle style={style(1)} />\n}\n"],"sourceRoot":"/source/"}