{"version":3,"sources":["debounce.js"],"names":[],"mappings":";;;;;AAGA,QAAM,GAAG,GAAG,SAAN,GAAG,CAAI,CAAC,EAAE,CAAC;aAAK,CAAC,GAAG,CAAC;KAAA,CAAA;AAC3B,QAAM,KAAK,GAAG,GAAG,CAAA;AACjB,QAAM,SAAS,GAAG,GAAG,CAAA;AACrB,QAAM,GAAG,GAAG,IAAI,CAAA;AAChB,QAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAA;AACvB,QAAM,iBAAiB,GAAG,IAAI,CAAA;;kDAEhB;AACZ,UAAI,OAAO,YAAA;UAAE,OAAO,YAAA;UAAE,QAAQ,YAAA;UAAE,KAAK,YAAA;UAAE,QAAQ,YAAA;UAAE,OAAO,YAAA,CAAA;AACxD,UAAI,YAAY,GAAG,KAAK,CAAA;AACxB,UAAI,OAAO,GAAG,EAAE,CAAA;;;AAGhB,UAAI,CAAC,KAAK,EAAE,CAAA;;AAEZ,QAAE,CAAC,KAAK,CAAC,YAAM;;AAEb,YAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;AACpB,8BAAA,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,EAAA;AACvB,iBAAO,IAAI,EAAE,CAAA;SACd;;AAED,YAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,OAAO,EACrD,OAAM;;AAER,4BAAA,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAA;AAC5B,0BAAA,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,EAAA;AACjC,6BAAA,QAAQ,GAAG,QAAQ,IAAI,KAAK,EAAA;;;AAG5B,YAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;AACtB,YAAM,IAAI,GAAG,QAAQ,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAA;AAC5C,6BAAA,QAAQ,GAAG,GAAG,EAAA;;;AAGd,4BAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAA;AACrB,YAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EACpB,oBAAA,OAAO,CAAC,GAAG,EAAE,iBAAA;;;AAGf,YAAI,IAAI,GAAG,KAAK,EAAE;AAChB,8BAAA,OAAO,GAAG,EAAE,EAAA;SACb;;aAEI;AACH,gBAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;;AAEvB,kCAAA,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,EAAA;;AAEjD,uCAAA,YAAY,GAAG,OAAO,GAAG,iBAAiB,EAAA;AAC1C,mCAAA,QAAQ,GAAG,YAAY,GAAG,SAAS,GAAG,KAAK,EAAA;aAC5C;WACF;;AAED,iBAAS,IAAI,GAAG;AACd,cAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAA;;AAEvB,cAAI,CAAC,MAAM,EAAE,CAAA;SACd;;;AAGD,oBAAY,CAAC,OAAO,CAAC,CAAA;AACrB,4BAAA,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAA;;OACrC,CAAC,CAAA;KACH","file":"debounce.js","sourcesContent":["// fancy debounce\n// detects if we are in autosave mode\n\nconst sum = (a, b) => a + b\nconst Delay = 300\nconst AutoDelay = 800\nconst Avg = 5000\nconst Clear = 1000 * 10\nconst AutoDetectAvgDiff = 1000\n\nview Debounce {\n  let showKey, timeout, lastTime, delay, curDelay, avgDiff\n  let isAutoSaving = false\n  let lastFew = []\n\n  // dont update unless we want to\n  view.pause()\n\n  on.props(() => {\n    // override\n    if (view.props.force) {\n      showKey = Math.random()\n      return show()\n    }\n\n    if (view.props.showKey && view.props.showKey == showKey)\n      return\n\n    showKey = view.props.showKey\n    delay = view.props.delay || Delay\n    curDelay = curDelay || delay\n\n    // find diff\n    const now = Date.now()\n    const diff = lastTime ? now - lastTime : Avg // or init to 5s\n    lastTime = now\n\n    // update queue\n    lastFew.unshift(diff)\n    if (lastFew.length > 3)\n      lastFew.pop()\n\n    // if its been a while, clear running avg\n    if (diff > Clear) {\n      lastFew = []\n    }\n    // otherwise update avg\n    else {\n      if (lastFew.length == 3) {\n        // find avg of last few\n        avgDiff = lastFew.reduce(sum, 0) / lastFew.length\n        // set autosaving\n        isAutoSaving = avgDiff < AutoDetectAvgDiff\n        curDelay = isAutoSaving ? AutoDelay : delay\n      }\n    }\n\n    function show() {\n      if (view.props.onUpdate)\n        view.props.onUpdate()\n\n      view.update()\n    }\n\n    // debounce\n    clearTimeout(timeout)\n    timeout = setTimeout(show, curDelay)\n  })\n}"],"sourceRoot":"/source/"}